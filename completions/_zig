#compdef zig

_zig() {
    typeset -A opt_args
    local ret=1

    local context curcontext="$curcontext" state line
    _arguments -s -S -C \
"1:: :_zig_commands" \
"*:: :->zig" \
&& ret=0
    case $state in
    (zig)
        curcontext="${curcontext%:*:*}:zig-command-$words[1]:"
        case $line[1] in
            (build)
_arguments -s -S -C \
"--build-file+[Override path to build.zig]:file:_files" \
"--cache-dir+[Override path to cache directory]:path:_files" \
"--prefix+[Override default install prefix]:prefix" \
"--help[Print this help and exit]" \
"--verbose[Print commands before executing them]" \
"--debug-build-verbose[Print verbose debugging information for the build system itself]" \
&& ret=0
;;
(build-exe)
_arguments -s -S -C \
"--assembly+[add assembly file to build]:file:_files" \
"--cache-dir+[override the cache directory]:path:_files" \
"--color+[enable or disable colored error messages]:when:( auto off on )" \
"--libc-include-dir+[directory where libc stdlib.h resides]:path:_files" \
"--name+[override output name]:name" \
"--output+[override destination path]:file:_files" \
"--output-h+[override generated header file path]:file:_files" \
"--pkg-begin+[make package available to import and push current pkg]:name" \
"--target-arch+[specify target architecture]:name" \
"--target-environ+[specify target environment]:name" \
"--target-os+[specify target operating system]:name" \
"--zig-std-dir+[directory where zig standard library resides]:path:_files" \
"-dirafter+[same as -isystem but do it last]:dir:_files" \
"-isystem+[add additional search path for other .h files]:dir:_files" \
"-mllvm+[additional arguments to forward to LLVM's option processing]:arg" \
"--ar-path+[set the path to ar]:path:_files" \
"--dynamic-linker+[set the path to ld.so]:path:_files" \
"--libc-lib-dir+[directory where libc crt1.o resides]:path:_files" \
"--libc-static-lib-dir+[directory where libc crtbegin.o resides]:path:_files" \
"--library+[link against lib]:lib" \
"--library-path+[add a directory to the library search path]:dir:_files" \
"--linker-script+[use a custom linker script]:path:_files" \
"--object+[add object file to build]:obj" \
"-L+[alias for --library-path]:dir:_path" \
"-rpath+[add directory to the runtime library search path]:path:_files" \
"-framework+[(darwin) link against framework]:name" \
"-mios-version-min+[(darwin) set iOS deployment target]:ver" \
"-mlinker-version+[(darwin) override linker version]:ver" \
"-mmacosx-version-min+[(darwin) set Mac OS X deployment target]:ver" \
"--ver-major+[dynamic library semver major version]:ver" \
"--ver-minor+[dynamic library semver minor version]:ver" \
"--ver-patch+[dynamic library semver patch version]:ver" \
"--enable-timing-info[print timing diagnostics]" \
"--pkg-end[pop current pkg]" \
"--release-fast[build with optimizations on and safety off]" \
"--release-safe[build with optimizations on and safety on]" \
"--static[output will be statically linked]" \
"--strip[exclude debug symbols]" \
"--verbose[turn on compiler debug output]" \
"--verbose-link[turn on compiler debug output for linking only]" \
"--each-lib-rpath[add rpath for each used dynamic library]" \
"-rdynamic[add all symbols to the dynamic symbol table]" \
"-mconsole[(windows) --subsystem console to the linker]" \
"-mwindows[(windows) --subsystem windows to the linker]" \
"-municode[(windows) link with unicode]" \
"*:source:_files" \
&& ret=0
;;
(build-lib)
_arguments -s -S -C \
"--assembly+[add assembly file to build]:file:_files" \
"--cache-dir+[override the cache directory]:path:_files" \
"--color+[enable or disable colored error messages]:when:( auto off on )" \
"--libc-include-dir+[directory where libc stdlib.h resides]:path:_files" \
"--name+[override output name]:name" \
"--output+[override destination path]:file:_files" \
"--output-h+[override generated header file path]:file:_files" \
"--pkg-begin+[make package available to import and push current pkg]:name" \
"--target-arch+[specify target architecture]:name" \
"--target-environ+[specify target environment]:name" \
"--target-os+[specify target operating system]:name" \
"--zig-std-dir+[directory where zig standard library resides]:path:_files" \
"-dirafter+[same as -isystem but do it last]:dir:_files" \
"-isystem+[add additional search path for other .h files]:dir:_files" \
"-mllvm+[additional arguments to forward to LLVM's option processing]:arg" \
"--ar-path+[set the path to ar]:path:_files" \
"--dynamic-linker+[set the path to ld.so]:path:_files" \
"--libc-lib-dir+[directory where libc crt1.o resides]:path:_files" \
"--libc-static-lib-dir+[directory where libc crtbegin.o resides]:path:_files" \
"--library+[link against lib]:lib" \
"--library-path+[add a directory to the library search path]:dir:_files" \
"--linker-script+[use a custom linker script]:path:_files" \
"--object+[add object file to build]:obj" \
"-L+[alias for --library-path]:dir:_path" \
"-rpath+[add directory to the runtime library search path]:path:_files" \
"-framework+[(darwin) link against framework]:name" \
"-mios-version-min+[(darwin) set iOS deployment target]:ver" \
"-mlinker-version+[(darwin) override linker version]:ver" \
"-mmacosx-version-min+[(darwin) set Mac OS X deployment target]:ver" \
"--ver-major+[dynamic library semver major version]:ver" \
"--ver-minor+[dynamic library semver minor version]:ver" \
"--ver-patch+[dynamic library semver patch version]:ver" \
"--enable-timing-info[print timing diagnostics]" \
"--pkg-end[pop current pkg]" \
"--release-fast[build with optimizations on and safety off]" \
"--release-safe[build with optimizations on and safety on]" \
"--static[output will be statically linked]" \
"--strip[exclude debug symbols]" \
"--verbose[turn on compiler debug output]" \
"--verbose-link[turn on compiler debug output for linking only]" \
"--each-lib-rpath[add rpath for each used dynamic library]" \
"-rdynamic[add all symbols to the dynamic symbol table]" \
"-mconsole[(windows) --subsystem console to the linker]" \
"-mwindows[(windows) --subsystem windows to the linker]" \
"-municode[(windows) link with unicode]" \
"*:source:_files" \
&& ret=0
;;
(build-obj)
_arguments -s -S -C \
"--assembly+[add assembly file to build]:file:_files" \
"--cache-dir+[override the cache directory]:path:_files" \
"--color+[enable or disable colored error messages]:when:( auto off on )" \
"--libc-include-dir+[directory where libc stdlib.h resides]:path:_files" \
"--name+[override output name]:name" \
"--output+[override destination path]:file:_files" \
"--output-h+[override generated header file path]:file:_files" \
"--pkg-begin+[make package available to import and push current pkg]:name" \
"--target-arch+[specify target architecture]:name" \
"--target-environ+[specify target environment]:name" \
"--target-os+[specify target operating system]:name" \
"--zig-std-dir+[directory where zig standard library resides]:path:_files" \
"-dirafter+[same as -isystem but do it last]:dir:_files" \
"-isystem+[add additional search path for other .h files]:dir:_files" \
"-mllvm+[additional arguments to forward to LLVM's option processing]:arg" \
"--ar-path+[set the path to ar]:path:_files" \
"--dynamic-linker+[set the path to ld.so]:path:_files" \
"--libc-lib-dir+[directory where libc crt1.o resides]:path:_files" \
"--libc-static-lib-dir+[directory where libc crtbegin.o resides]:path:_files" \
"--library+[link against lib]:lib" \
"--library-path+[add a directory to the library search path]:dir:_files" \
"--linker-script+[use a custom linker script]:path:_files" \
"--object+[add object file to build]:obj" \
"-L+[alias for --library-path]:dir:_path" \
"-rpath+[add directory to the runtime library search path]:path:_files" \
"-framework+[(darwin) link against framework]:name" \
"-mios-version-min+[(darwin) set iOS deployment target]:ver" \
"-mlinker-version+[(darwin) override linker version]:ver" \
"-mmacosx-version-min+[(darwin) set Mac OS X deployment target]:ver" \
"--ver-major+[dynamic library semver major version]:ver" \
"--ver-minor+[dynamic library semver minor version]:ver" \
"--ver-patch+[dynamic library semver patch version]:ver" \
"--enable-timing-info[print timing diagnostics]" \
"--pkg-end[pop current pkg]" \
"--release-fast[build with optimizations on and safety off]" \
"--release-safe[build with optimizations on and safety on]" \
"--static[output will be statically linked]" \
"--strip[exclude debug symbols]" \
"--verbose[turn on compiler debug output]" \
"--verbose-link[turn on compiler debug output for linking only]" \
"--each-lib-rpath[add rpath for each used dynamic library]" \
"-rdynamic[add all symbols to the dynamic symbol table]" \
"-mconsole[(windows) --subsystem console to the linker]" \
"-mwindows[(windows) --subsystem windows to the linker]" \
"-municode[(windows) link with unicode]" \
"*:source:_files" \
&& ret=0
;;
(parsec)
_arguments -s -S -C \
"1:: :_zig__parsec_commands" \
&& ret=0
;;
(targets)
_arguments -s -S -C \
&& ret=0
;;
(test)
_arguments -s -S -C \
"--test-filter+[skip tests that do not match filter]:text" \
"--test-name-prefix+[add prefix to all tests]:text" \
"*:source:_files" \
&& ret=0
;;
(version)
_arguments -s -S -C \
&& ret=0
;;
(zen)
_arguments -s -S -C \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_zig_commands] )) ||
_zig_commands() {
    local commands; commands=(
        "build:build project from build.zig" \
"build-exe:create executable from source or object files" \
"build-lib:create library from source or object files" \
"build-obj:create object from source or assembly" \
"parsec:convert a c header file to zig extern declarations" \
"targets:list available compilation targets" \
"test:create and run a test build" \
"version:print version number and exit" \
"zen:print zen of zig and 1exit" \
    )
    _describe -t commands 'zig commands' commands "$@"
}
(( $+functions[_zig__build_commands] )) ||
_zig__build_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig build commands' commands "$@"
}
(( $+functions[_zig__build_exe_commands] )) ||
_zig__build_exe_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig build-exe commands' commands "$@"
}
(( $+functions[_zig__build_lib_commands] )) ||
_zig__build_lib_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig build-lib commands' commands "$@"
}
(( $+functions[_zig__build_obj_commands] )) ||
_zig__build_obj_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig build-obj commands' commands "$@"
}
(( $+functions[_zig__parsec_commands] )) ||
_zig__parsec_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig parsec commands' commands "$@"
}
(( $+functions[_zig__targets_commands] )) ||
_zig__targets_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig targets commands' commands "$@"
}
(( $+functions[_zig__test_commands] )) ||
_zig__test_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig test commands' commands "$@"
}
(( $+functions[_zig__version_commands] )) ||
_zig__version_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig version commands' commands "$@"
}
(( $+functions[_zig__zen_commands] )) ||
_zig__zen_commands() {
    local commands; commands=(
    )
    _describe -t commands 'zig zen commands' commands "$@"
}

_zig "$@"
